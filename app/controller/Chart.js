// Generated by CoffeeScript 1.6.3
Ext.define("MyTrends.controller.Chart", {
  extend: "Ext.app.Controller",
  config: {
	    refs: 
	    {
	      TrendGroupBar: "trendgroupbar",
	      imageCanvas: "trendgroupbar canvas[itemId=imageCanvas]"
	    },
	    control: 
	    {
           'button[action=showchart]': {
                tap: 'onCanvasImageReady'
           },
/*
	    	trendgroupbar: 
	    	{
	        canvasImageReady: 'onCanvasImageReady'
			}, 
*/
		
		}
  },
  onCanvasImageReady: function() {
    this.brushSize = 2;
    
this.drawPanel();
    document.addEventListener("touchstart", Ext.Function.bind(this.doTouchStart, this), false);
    document.addEventListener("touchmove", Ext.Function.bind(this.doTouchMove, this), false);
    document.addEventListener("touchend", Ext.Function.bind(this.doTouchEnd, this), false);
    document.addEventListener("touchcancel", Ext.Function.bind(this.doTouchCancel, this), false);
    document.addEventListener("mousedown", Ext.Function.bind(this.doMouseDown, this), false);
    document.addEventListener("mousemove", Ext.Function.bind(this.doMouseMove, this), false);
    document.addEventListener("mouseup", Ext.Function.bind(this.doMouseUp, this), false);
    this.lastX = -1;
    this.lastY = -1;
    this.startTime = null;
    this.activeColor = "#00F";
    return this.brushSize = 2;

  },
  getBrushSize: function() {
    return this.brushSize;
  },
  setBrushSize: function(brushSize) {
    return this.brushSize;
  },
  getCanvas: function() {
    return document.getElementById("imageCanvas").firstChild;
  },
  getCtx: function() {
    return this.getCanvas().getContext('2d');
  },
  getNumButtonsInPanel: function() {
    return 7;
  },
  getHeaderHeight: function() {
    return 20;
  },
  getCanvasWidth: function() {
    return this.getCanvas().width;
  },
  getPanelSize: function() {
    return this.getCanvasWidth() / this.getNumButtonsInPanel();
  },
  getColors: function() {
    return ["RED", "BLUE", "GREEN", "BLACK"];
  },
  drawPanel: function() {
    var colorArray, ctx, header_height, i, numButtonsInPanel, panel_size, _results;
    ctx = this.getCtx();
    panel_size = this.getPanelSize();
    header_height = this.getHeaderHeight();
    colorArray = this.getColors();
    numButtonsInPanel = this.getNumButtonsInPanel();
    ctx.fillStyle = "black";
    ctx.beginPath();
    ctx.arc(panel_size / 2, header_height + panel_size / 2 - 2, panel_size / 10, 0, 2 * Math.PI, true);
    ctx.closePath();
    ctx.fill();
    ctx.beginPath();
    ctx.arc(panel_size * 3 / 2, header_height + panel_size / 2 - 2, panel_size / 3, 0, 2 * Math.PI, true);
    ctx.closePath();
    ctx.fill();
    i = 0;
    while (i < colorArray.length) {
      ctx.fillStyle = colorArray[i];
      ctx.fillRect((i + 2) * panel_size + 3, header_height, panel_size - 6, panel_size - 6);
      i++;
    }
    ctx.beginPath();
    ctx.arc(panel_size * (numButtonsInPanel - 0.5), header_height + panel_size / 2 - 2, panel_size / 3, 0, 2 * Math.PI, true);
    ctx.closePath();
    ctx.stroke();
    i = 0;
    _results = [];
    while (i < numButtonsInPanel) {
      ctx.strokeRect(i * panel_size + 3, header_height, panel_size - 6, panel_size - 6);
      _results.push(i++);
    }
    return _results;
  },
  drawPen: function(x, y) {
    var ctx;
    ctx = this.getCtx();
    ctx.lineWidth = this.getBrushSize();
    ctx.strokeStyle = this.activeColor;
    ctx.beginPath();
    ctx.moveTo(this.lastX, this.lastY);
    ctx.lineTo(x, y);
    return ctx.stroke();
  },
  withinPanelBound: function(y) {
    return y < (this.getHeaderHeight() + this.getPanelSize() + this.brushSize);
  },
  drawWithEvent: function(x, y, eventName) {
    if (this.withinPanelBound(y)) {
      this.lastX = -1;
      this.lastY = -1;
      return;
    }
    if (x || y) {
      if ((this.lastX === -1) || this.lastY === -1) {
        this.lastX = x;
        this.lastY = y;
      }
      this.drawPen(x, y);
      this.lastX = x;
      return this.lastY = y;
    }
  },
  clearCanvas: function() {
    return this.getCtx().clearRect(0, this.getHeaderHeight() + this.getPanelSize(), this.getCanvas().width, this.getCanvas().height - this.getHeaderHeight());
  },
  widerBrush: function() {
    if (this.brushSize < 30) {
      return this.brushSize = this.brushSize + 5;
    }
  },
  narrowBrush: function() {
    if (this.brushSize > 5) {
      return this.brushSize = this.brushSize - 5;
    }
  },
  selectEvent: function(x, y) {
    var eventIndex;
    if (!this.withinPanelBound(y)) {
      return;
    }
    eventIndex = parseInt(x / this.getPanelSize(), 10);
    switch (eventIndex) {
      case 0:
        return this.narrowBrush();
      case 1:
        return this.widerBrush();
      case 2:
      case 3:
      case 4:
      case 5:
        return this.changeColor(eventIndex - 2);
      case 6:
        return this.clearCanvas();
    }
  },
  changeColor: function(index) {
    return this.activeColor = this.getColors()[index];
  },
  doMouseMove: function(event) {
    var x, y;
    x = event.clientX;
    y = event.clientY - 45;
    return this.drawWithEvent(x, y, "Pointer");
  },
  doMouseDown: function(event) {
    return this.selectEvent(event.clientX, event.clientY - 45);
  },
  doTouchStart: function(event) {
    var touchEvent, x, y;
    event.preventDefault();
    touchEvent = event.changedTouches[0];
    x = touchEvent.pageX;
    y = touchEvent.pageY - 45;
    if (x || y) {
      if (!this.withinPanelBound(y)) {
        this.lastX = touchEvent.pageX;
        return this.lastY = touchEvent.pageY;
      }
    }
  },
  doTouchMove: function(event) {
    var touchEvent, x, y;
    event.preventDefault();
    touchEvent = event.changedTouches[0];
    x = touchEvent.pageX;
    y = touchEvent.pageY - 45;
    return this.drawWithEvent(x, y, "TouchMove");
  },
  doMouseUp: function(event) {
    return this.drawWithEvent(event.clientX, event.clientY - 45, "Pointer");
  },
  doTouchEnd: function(event) {
    var duration, end, touchEvent;
    event.preventDefault();
    touchEvent = event.changedTouches[0];
    if (this.withinPanelBound(touchEvent.pageY)) {
      this.selectEvent(touchEvent.pageX, touchEvent.pageY - 45);
      end = new Date();
      duration = end - this.startTime;
      return this.startTime = new Date();
    }
  },
  doTouchCancel: function(event) {
    var touchEvent;
    event.preventDefault();
    return touchEvent = event.changedTouches[0];
  }
});
